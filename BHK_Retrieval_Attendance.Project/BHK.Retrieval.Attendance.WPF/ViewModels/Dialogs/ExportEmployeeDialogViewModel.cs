using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using Microsoft.Extensions.Logging;
using BHK.Retrieval.Attendance.WPF.Services.Interfaces;
using BHK.Retrieval.Attendance.Core.DTOs.Responses;

namespace BHK.Retrieval.Attendance.WPF.ViewModels.Dialogs
{
    /// <summary>
    /// ViewModel cho dialog xu·∫•t Employee v√†o Excel
    /// ‚úÖ T√ÅI S·ª¨ D·ª§NG cho c·∫£ Test v√† Real data
    /// </summary>
    public partial class ExportEmployeeDialogViewModel : ObservableObject
    {
        private readonly IPathConfigurationService _pathConfig;
        private readonly IExcelTableService _excelService;
        private readonly ILogger<ExportEmployeeDialogViewModel> _logger;
        private List<EmployeeExportDto> _data;
        private Window? _dialog;

        #region Properties

        [ObservableProperty]
        private string _filePath = string.Empty;

        [ObservableProperty]
        private string _fileName = string.Empty;

        [ObservableProperty]
        private string _selectedTable = string.Empty;

        [ObservableProperty]
        private ObservableCollection<string> _availableTables = new();

        [ObservableProperty]
        private int _recordCount;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _statusMessage = string.Empty;

        [ObservableProperty]
        private bool _canCreateTable;

        [ObservableProperty]
        private bool _isTableSelected;

        [ObservableProperty]
        private bool _showCreateDefaultTable;

        [ObservableProperty]
        private string _tableValidationMessage = string.Empty;

        public bool DialogResult { get; private set; }
        
        /// <summary>
        /// Set dialog window reference - g·ªçi t·ª´ b√™n ngo√†i
        /// </summary>
        public void SetDialog(Window dialog)
        {
            _dialog = dialog;
        }

        #endregion

        #region Constructor

        public ExportEmployeeDialogViewModel(
            IPathConfigurationService pathConfig,
            IExcelTableService excelService,
            ILogger<ExportEmployeeDialogViewModel> logger)
        {
            _pathConfig = pathConfig ?? throw new ArgumentNullException(nameof(pathConfig));
            _excelService = excelService ?? throw new ArgumentNullException(nameof(excelService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _data = new List<EmployeeExportDto>();

            // Load initial values t·ª´ PathConfigurationService
            FilePath = _pathConfig.GetEmployeeDataFile();
            SelectedTable = _pathConfig.GetEmployeeTableName();

            _ = LoadFileInfoAsync();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Set data ƒë·ªÉ xu·∫•t - g·ªçi t·ª´ b√™n ngo√†i (Test ho·∫∑c Real data)
        /// </summary>
        public void SetData(List<EmployeeExportDto> data)
        {
            _data = data ?? new List<EmployeeExportDto>();
        }

        #endregion

        #region Commands

        [RelayCommand]
        private void BrowseFile()
        {
            var dialog = new OpenFileDialog
            {
                Title = "Ch·ªçn file Excel xu·∫•t danh s√°ch nh√¢n vi√™n",
                Filter = "Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*",
                DefaultExt = ".xlsx",
                InitialDirectory = Path.GetDirectoryName(FilePath)
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
                _pathConfig.SaveEmployeeDataFile(FilePath); // ‚úÖ L∆∞u v√†o Settings
                _ = LoadFileInfoAsync();
            }
        }

        [RelayCommand]
        private async Task CreateTable()
        {
            if (string.IsNullOrWhiteSpace(FilePath))
            {
                StatusMessage = "Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc";
                return;
            }

            if (string.IsNullOrWhiteSpace(SelectedTable))
            {
                StatusMessage = "Vui l√≤ng nh·∫≠p t√™n Excel table";
                return;
            }

            try
            {
                IsLoading = true;
                StatusMessage = "ƒêang t·∫°o Excel table...";

                await _excelService.CreateEmployeeTableAsync(FilePath, SelectedTable);

                StatusMessage = $"‚úÖ ƒê√£ t·∫°o Excel table '{SelectedTable}' th√†nh c√¥ng v·ªõi 10 c·ªôt employee";
                _logger.LogInformation($"Created Excel table '{SelectedTable}' in {FilePath}");

                // Reload table list
                await LoadFileInfoAsync();
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå L·ªói t·∫°o Excel table: {ex.Message}";
                _logger.LogError(ex, "Failed to create Excel table");
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task Export()
        {
            if (string.IsNullOrWhiteSpace(FilePath))
            {
                StatusMessage = "Vui l√≤ng ch·ªçn file Excel";
                return;
            }

            if (string.IsNullOrWhiteSpace(SelectedTable))
            {
                StatusMessage = "Vui l√≤ng ch·ªçn Excel table";
                return;
            }

            if (_data == null || !_data.Any())
            {
                StatusMessage = "Kh√¥ng c√≥ d·ªØ li·ªáu employee ƒë·ªÉ xu·∫•t";
                return;
            }

            try
            {
                IsLoading = true;
                StatusMessage = $"ƒêang xu·∫•t {_data.Count} records v√†o Excel table...";

                // ‚úÖ Xu·∫•t d·ªØ li·ªáu v√†o Excel Table (kh√¥ng ph·∫£i worksheet)
                await _excelService.ExportEmployeeDataAsync(FilePath, SelectedTable, _data);

                StatusMessage = $"‚úÖ ƒê√£ xu·∫•t {_data.Count} records v√†o Excel table th√†nh c√¥ng!";
                _logger.LogInformation($"Exported {_data.Count} records to Excel table '{SelectedTable}' in {FilePath}");

                MessageBox.Show($"üéâ Xu·∫•t th√†nh c√¥ng!\n\nüìä ƒê√£ xu·∫•t {_data.Count} b·∫£n ghi employee v√†o Excel table '{SelectedTable}'\nüìÅ File: {Path.GetFileName(FilePath)}\n\n‚ú® Excel table c√≥ filter v√† structured references s·∫µn s√†ng s·ª≠ d·ª•ng!",
                    "Th√†nh c√¥ng",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);

                DialogResult = true;
                if (_dialog != null)
                {
                    _dialog.DialogResult = true;
                    _dialog.Close();
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå L·ªói xu·∫•t v√†o Excel table: {ex.Message}";
                _logger.LogError(ex, "Failed to export data to Excel table");
                
                MessageBox.Show($"L·ªói xu·∫•t d·ªØ li·ªáu: {ex.Message}",
                    "L·ªói",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void Cancel()
        {
            DialogResult = false;
            if (_dialog != null)
            {
                _dialog.DialogResult = false;
                _dialog.Close();
            }
        }

        #endregion

        #region Helper Methods

        private async Task LoadFileInfoAsync()
        {
            if (string.IsNullOrWhiteSpace(FilePath))
                return;

            try
            {
                IsLoading = true;
                StatusMessage = "ƒêang ki·ªÉm tra file...";

                // Update file name
                FileName = Path.GetFileName(FilePath);

                // Validate file
                var isValid = await _excelService.ValidateExcelFileAsync(FilePath);
                if (!isValid)
                {
                    StatusMessage = "File Excel kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p";
                    return;
                }

                // Get table names
                var tables = await _excelService.GetTableNamesAsync(FilePath);
                AvailableTables = new ObservableCollection<string>(tables);

                if (tables.Any())
                {
                    ShowCreateDefaultTable = false; // Hide create button when tables exist
                    
                    // N·∫øu c√≥ tables, ki·ªÉm tra xem default table c√≥ t·ªìn t·∫°i kh√¥ng
                    var defaultTable = _pathConfig.GetEmployeeTableName();
                    if (tables.Contains(defaultTable, StringComparer.OrdinalIgnoreCase))
                    {
                        SelectedTable = defaultTable;
                        await UpdateTableInfoAsync();
                    }
                    else
                    {
                        // Ch·ªçn table ƒë·∫ßu ti√™n
                        SelectedTable = tables.First();
                        await UpdateTableInfoAsync();
                    }

                    CanCreateTable = false;
                    StatusMessage = $"‚úÖ T√¨m th·∫•y {tables.Count} Excel table trong file";
                }
                else
                {
                    // Kh√¥ng c√≥ Excel table n√†o, hi·ªÉn th·ªã n√∫t "T·∫°o default table"
                    ShowCreateDefaultTable = true;
                    CanCreateTable = true;
                    IsTableSelected = false;
                    TableValidationMessage = ""; // Clear any previous validation message
                    SelectedTable = ""; // Clear selected table
                    StatusMessage = "üìã File kh√¥ng c√≥ Excel table n√†o. C·∫ßn t·∫°o Excel table m·ªõi ƒë·ªÉ xu·∫•t d·ªØ li·ªáu";
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå L·ªói ki·ªÉm tra file Excel: {ex.Message}";
                _logger.LogError(ex, "Failed to load Excel file info");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task UpdateTableInfoAsync()
        {
            if (string.IsNullOrWhiteSpace(SelectedTable))
            {
                IsTableSelected = false;
                RecordCount = 0;
                TableValidationMessage = ""; // Clear validation message when no table selected
                ShowCreateDefaultTable = AvailableTables?.Count == 0; // Show create button only when no tables exist
                return;
            }

            try
            {
                // Ki·ªÉm tra c·ªôt table c√≥ h·ª£p l·ªá kh√¥ng
                var isValid = await _excelService.ValidateTableColumnsAsync(FilePath, SelectedTable, "Employee");
                
                if (!isValid)
                {
                    // C·ªôt kh√¥ng h·ª£p l·ªá - hi·ªÉn th·ªã th√¥ng b√°o v√† n√∫t refactor
                    TableValidationMessage = "‚ö†Ô∏è C·∫•u tr√∫c c·ªôt table kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Employee";
                    IsTableSelected = false; // Kh√¥ng cho ph√©p xu·∫•t
                    ShowCreateDefaultTable = false; // Hide create button when table exists but invalid
                }
                else
                {
                    // C·ªôt h·ª£p l·ªá - cho ph√©p xu·∫•t
                    TableValidationMessage = "";
                    IsTableSelected = true;
                    ShowCreateDefaultTable = false; // Hide create button when valid table selected
                    
                    // L∆∞u table name v√†o settings
                    _pathConfig.SaveEmployeeTableName(SelectedTable);

                    // Get record count t·ª´ Excel Table
                    RecordCount = await _excelService.GetRecordCountAsync(FilePath, SelectedTable);
                    StatusMessage = $"üìä Excel table '{SelectedTable}' c√≥ {RecordCount} records - C·∫•u tr√∫c h·ª£p l·ªá ‚úÖ";
                }

                CanCreateTable = false;
            }
            catch (Exception ex)
            {
                TableValidationMessage = $"‚ùå L·ªói ki·ªÉm tra table: {ex.Message}";
                IsTableSelected = false;
                _logger.LogError(ex, "Failed to update Excel table info");
            }
        }

        partial void OnSelectedTableChanged(string value)
        {
            // Always call UpdateTableInfoAsync to handle both selection and deselection
            _ = UpdateTableInfoAsync();
        }

        partial void OnFilePathChanged(string value)
        {
            if (!string.IsNullOrWhiteSpace(value))
            {
                _ = LoadFileInfoAsync();
            }
        }

        [RelayCommand]
        private async Task CreateDefaultTable()
        {
            if (string.IsNullOrWhiteSpace(FilePath))
            {
                StatusMessage = "Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc";
                return;
            }

            try
            {
                IsLoading = true;
                StatusMessage = "ƒêang t·∫°o Employee table m·∫∑c ƒë·ªãnh...";

                // L·∫•y t√™n table m·∫∑c ƒë·ªãnh t·ª´ settings
                var defaultTableName = _pathConfig.GetEmployeeTableName();
                
                await _excelService.CreateEmployeeTableAsync(FilePath, defaultTableName);

                StatusMessage = $"‚úÖ ƒê√£ t·∫°o Employee table '{defaultTableName}' th√†nh c√¥ng v·ªõi 10 c·ªôt ti√™u chu·∫©n";
                _logger.LogInformation($"Created default Employee table '{defaultTableName}' in {FilePath}");

                // Reload table list
                await LoadFileInfoAsync();
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå L·ªói t·∫°o Employee table m·∫∑c ƒë·ªãnh: {ex.Message}";
                _logger.LogError(ex, "Failed to create default Employee table");
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task ShowRefactorDialog()
        {
            if (string.IsNullOrWhiteSpace(SelectedTable))
                return;

            try
            {
                // L·∫•y th√¥ng tin c·ªôt hi·ªán t·∫°i v√† mong ƒë·ª£i
                var currentColumns = await _excelService.GetTableColumnsAsync(FilePath, SelectedTable);
                var expectedColumns = new List<string> { "ID", "Name", "IDNumber", "Department", "Sex", "Birthday", "Created", "Status", "Comment", "EnrollmentCount" };

                // T·∫°o v√† hi·ªÉn th·ªã dialog refactor
                var refactorDialog = new Views.Dialogs.RefactorColumnsDialog();
                var refactorViewModel = new RefactorColumnsDialogViewModel(_excelService, 
                    Microsoft.Extensions.Logging.LoggerFactory.Create(builder => builder.AddConsole())
                        .CreateLogger<RefactorColumnsDialogViewModel>());
                
                refactorViewModel.SetDialog(refactorDialog);
                refactorViewModel.SetData(FilePath, SelectedTable, "Employee", currentColumns, expectedColumns);
                
                refactorDialog.DataContext = refactorViewModel;
                refactorDialog.Owner = _dialog;

                var result = refactorDialog.ShowDialog();
                
                if (result == true)
                {
                    // N·∫øu refactor th√†nh c√¥ng, reload table info
                    await UpdateTableInfoAsync();
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"‚ùå L·ªói hi·ªÉn th·ªã dialog refactor: {ex.Message}";
                _logger.LogError(ex, "Failed to show refactor dialog");
            }
        }

        #endregion
    }
}